// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MjrChess.Trainer.Data;

namespace MjrChess.Trainer.Data.Migrations
{
    [DbContext(typeof(PuzzleDbContext))]
    [Migration("20200526205648_RemovePuzzlePieceType")]
    partial class RemovePuzzlePieceType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Site")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(5170), new TimeSpan(0, -4, 0, 0, 0)),
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(6434), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "Hustler",
                            Site = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7561), new TimeSpan(0, -4, 0, 0, 0)),
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7618), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "Noobie",
                            Site = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7651), new TimeSpan(0, -4, 0, 0, 0)),
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7666), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "Vini700",
                            Site = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7680), new TimeSpan(0, -4, 0, 0, 0)),
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7694), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "aupoil",
                            Site = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7708), new TimeSpan(0, -4, 0, 0, 0)),
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7721), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "toskekg",
                            Site = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7736), new TimeSpan(0, -4, 0, 0, 0)),
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 677, DateTimeKind.Unspecified).AddTicks(7749), new TimeSpan(0, -4, 0, 0, 0)),
                            Name = "wolfwolf",
                            Site = 0
                        });
                });

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.PuzzleHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PuzzleId")
                        .HasColumnType("int");

                    b.Property<bool>("Solved")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PuzzleId");

                    b.ToTable("PuzzleHistories");
                });

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.TacticsPuzzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlackPlayerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("GameDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GameUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncorrectMovedFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncorrectMovedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncorrectPiecePromotedTo")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MovedFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PiecePromotedTo")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetupMovedFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetupMovedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SetupPiecePromotedTo")
                        .HasColumnType("int");

                    b.Property<string>("Site")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WhitePlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlackPlayerId");

                    b.HasIndex("WhitePlayerId");

                    b.ToTable("Puzzles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlackPlayerId = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 679, DateTimeKind.Unspecified).AddTicks(9742), new TimeSpan(0, -4, 0, 0, 0)),
                            GameDate = new DateTimeOffset(new DateTime(2015, 2, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 679, DateTimeKind.Unspecified).AddTicks(9797), new TimeSpan(0, -4, 0, 0, 0)),
                            MovedFrom = "f3",
                            MovedTo = "f7",
                            Position = "rnbqk1nr/pppp1ppp/8/2b1p3/2B1P3/5Q2/PPPP1PPP/RNB1K1NR b KQkq - 3 3",
                            SetupMovedFrom = "b8",
                            SetupMovedTo = "c6",
                            WhitePlayerId = 1
                        },
                        new
                        {
                            Id = 2,
                            BlackPlayerId = 4,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 680, DateTimeKind.Unspecified).AddTicks(3050), new TimeSpan(0, -4, 0, 0, 0)),
                            GameDate = new DateTimeOffset(new DateTime(2016, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GameUrl = "https://lichess.org/3piQphpY",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 680, DateTimeKind.Unspecified).AddTicks(3092), new TimeSpan(0, -4, 0, 0, 0)),
                            MovedFrom = "c6",
                            MovedTo = "a5",
                            Position = "r3r1k1/ppp2pp1/2n4p/3q4/3Pb3/B1P2N1P/P2Q1PP1/R3R1K1 w - - 4 16",
                            SetupMovedFrom = "e1",
                            SetupMovedTo = "e3",
                            Site = "lichess.org",
                            WhitePlayerId = 3
                        },
                        new
                        {
                            Id = 3,
                            BlackPlayerId = 6,
                            CreatedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 680, DateTimeKind.Unspecified).AddTicks(6384), new TimeSpan(0, -4, 0, 0, 0)),
                            GameDate = new DateTimeOffset(new DateTime(2016, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GameUrl = "https://lichess.org/HjVhr1Dn",
                            IncorrectMovedFrom = "f8",
                            IncorrectMovedTo = "f5",
                            LastModifiedDate = new DateTimeOffset(new DateTime(2020, 5, 26, 16, 56, 47, 680, DateTimeKind.Unspecified).AddTicks(6426), new TimeSpan(0, -4, 0, 0, 0)),
                            MovedFrom = "e7",
                            MovedTo = "b4",
                            Position = "r2q1rk1/1pp1b1pp/p7/4pp2/2PnB1P1/3PB2P/PP1Q1P2/R3K2R w KQ - 0 15",
                            SetupMovedFrom = "g4",
                            SetupMovedTo = "f5",
                            Site = "lichess.org",
                            WhitePlayerId = 5
                        });
                });

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("LastModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.UserSettingsXPlayer", b =>
                {
                    b.Property<int>("UserSettingsId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("UserSettingsId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("UserSettingsXPlayers");
                });

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.PuzzleHistory", b =>
                {
                    b.HasOne("MjrChess.Trainer.Data.Models.TacticsPuzzle", "Puzzle")
                        .WithMany("History")
                        .HasForeignKey("PuzzleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.TacticsPuzzle", b =>
                {
                    b.HasOne("MjrChess.Trainer.Data.Models.Player", "BlackPlayer")
                        .WithMany()
                        .HasForeignKey("BlackPlayerId");

                    b.HasOne("MjrChess.Trainer.Data.Models.Player", "WhitePlayer")
                        .WithMany()
                        .HasForeignKey("WhitePlayerId");
                });

            modelBuilder.Entity("MjrChess.Trainer.Data.Models.UserSettingsXPlayer", b =>
                {
                    b.HasOne("MjrChess.Trainer.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MjrChess.Trainer.Data.Models.UserSettings", "UserSettings")
                        .WithMany("PreferredPlayers")
                        .HasForeignKey("UserSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
