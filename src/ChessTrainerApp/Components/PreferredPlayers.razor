@using Microsoft.Extensions.DependencyInjection 
@using MjrChess.Trainer.BlazorExtensions
@using MjrChess.Trainer.Models
@using MjrChess.Trainer.Services
@using Nito.AsyncEx 

@inherits MaterialDesignComponentBase

<div class="mdc-card">
    <div class="card-title">
        <h2 class="mdc-typography mdc-typography--headline6">
            Preferred Players
        </h2>
        <span class="mdc-layout-grid--align-right">
            @if (ShowPlayerList)
            {
                <button class="mdc-icon-button material-icons" @onclick="() => ShowPlayerList = false">expand_less</button>
            }
            else
            {
                <button class="mdc-icon-button mdc-icon material-icons" @onclick="() => ShowPlayerList = true">expand_more</button>
            }
        </span>
    </div>
    @if (ShowPlayerList)
    {
        <AuthorizeView>
            <Authorized>
                <div class="mdc-card-body mdc-typography mdc-typography--body2">
                    <div class="mdc-list-group">
                        <ul class="mdc-list mdc-list--non-interactive mdc-list--two-line">
                            @foreach ((var player, var puzzleCount) in Players)
                            {
                                <li class="mdc-list-item">
                                    <span class="mdc-list-item__text">
                                        <span class="mdc-list-item__primary-text">@player.Name (@player.Site.ToString())</span>
                                        <span class="mdc-chip mdc-info-chip-small" role="row">
                                            <span role="gridcell">
                                                <span class="mdc-chip__text">@puzzleCount @(puzzleCount == 1 ? "puzzle" : "puzzles")</span>
                                            </span>
                                        </span>
                                        @*<span class="mdc-list-item__secondary-text">@puzzleCount @(puzzleCount == 1 ? "puzzle" : "puzzles")</span>*@
                                    </span>
                                    <div class="mdc-layout-grid--align-right">
                                        <button class="mdc-icon-button material-icons" @onclick="async () => await RemovePlayerAsync(player.Id)">clear</button>
                                    </div>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="mdc-card__actions mdc-card__actions--full-bleed mdc-layout-grid--align-right">
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => ShowAddPlayer = !ShowAddPlayer">add</button>
                </div>
                @if (ShowAddPlayer)
                {
                    <AddPreferredPlayer OnAddPreferredPlayer="AddNewPreferredPlayer" />
                }
            </Authorized>
            <NotAuthorized>
                <div class="mdc-typography mdc-typography--body2">
                    Log in to choose which players' games you want puzzles from.
                </div>
            </NotAuthorized>
        </AuthorizeView>
    }
</div>

@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; } = default!;

    public IUserService UserService { get; set; } = default!;

    public IPlayerService PlayerService { get; set; } = default!;

    [Inject]
    public CurrentUserService CurrentUserService { get; set; } = default!;

    public ICollection<(Player, int)> Players { get; set; } = default!;

    public bool ShowAddPlayer { get; set; }

    public bool ShowPlayerList { get; set; }

    // UserService and PlayerService depend on an EF Core DBContext and, therefore, are not thread safe
    private AsyncLock serviceLock = new AsyncLock();

    protected override async Task OnInitializedAsync()
    {
        UserService = ScopedServices.GetRequiredService<IUserService>();
        PlayerService = ScopedServices.GetRequiredService<IPlayerService>();

        await RefreshPreferredPlayersAsync();
    }

    private async Task RefreshPreferredPlayersAsync()
    {
        Players = new List<(Player, int)>();

        if (!(CurrentUserService.CurrentUserId is null))
        {
            using (await serviceLock.LockAsync())
            {
                foreach (var player in (await UserService.GetPreferredPlayersAsync(CurrentUserService.CurrentUserId)).ToArray())
                {
                    var puzzleCount = await PlayerService.GetPlayerPuzzleCountAsync(player.Id);
                    Players.Add((player, puzzleCount));
                }
            }
        }

        StateHasChanged();
    }

    protected async Task AddNewPreferredPlayer(string name, ChessSites site)
    {
        if (!(CurrentUserService.CurrentUserId is null))
        {
            using (await serviceLock.LockAsync())
            {
                var player = await PlayerService.GetOrAddPlayerAsync(name, site);
                if (player != null)
                {
                    var result = await UserService.AddPreferredPlayerAsync(CurrentUserService.CurrentUserId, player);
                    if (result)
                    {
                        ShowAddPlayer = false;
                        await JSRuntime.InvokeVoidAsync("notify", $"Player added!\n\nNote that if {player.Name}'s games are not alreaady analyzed, it may take some time before puzzles based on their games are available.");
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("notify", $"Could not add {player.Name}. Are they already added?");
                    }
                }
            }

            // Make sure RefreshPreferredPlayersAsync is called outside the lock
            // since AsyncLock is not re-entrant.
            await RefreshPreferredPlayersAsync();
        }
    }

    protected async Task RemovePlayerAsync(int playerId)
    {
        if (!(CurrentUserService.CurrentUserId is null))
        {
            using (await serviceLock.LockAsync())
            {
                await UserService.RemovePreferredPlayerAsync(CurrentUserService.CurrentUserId, playerId);
                await PlayerService.CleanUpPlayerAsync(playerId);
            }

            // Make sure RefreshPreferredPlayersAsync is called outside the lock
            // since AsyncLock is not re-entrant.
            await RefreshPreferredPlayersAsync();
        }
    }
}
