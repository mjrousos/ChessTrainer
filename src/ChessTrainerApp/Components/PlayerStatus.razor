@using MjrChess.Trainer.BlazorExtensions

@inherits MaterialDesignComponentBase

<div class="mdc-layout-grid nested-tight-grid">
    <div class="mdc-layout-grid__inner">
        <div class="
             mdc-layout-grid__cell
             mdc-layout-grid__cell--span-4
             playerName 
             @(((Game.WhiteToMove == WhitePlayer) && Game.Result == GameResult.Ongoing) ? "activePlayer" : "")">
            <h2>@(WhitePlayer ? Game.WhitePlayer : Game.BlackPlayer)</h2>
        </div>
        <div class="
             capturedPieces
             playerName
             mdc-layout-grid__cell
             mdc-layout-grid__cell--span-8-desktop
             mdc-layout-grid__cell--span-4-tablet
             mdc-layout-grid__cell--span-4-phone
             mdc-layout-grid--align-right">
            @foreach (var piece in MissingPieces)
            {
                <ChessPieceComponent PieceType="piece" />
            }
            <h2>@PlayerAdvantage</h2>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool WhitePlayer { get; set; }

    [Parameter]
    public ChessGame Game { get; set; }

    private string PlayerAdvantage
    {
        get
        {
            var advantage = WhitePlayer ? Game.WhiteAdvantage : -Game.WhiteAdvantage;

            return advantage > 0 ? $"+{advantage}" : string.Empty;
        }
    }

    private IEnumerable<ChessPieces> MissingPieces
    {
        get
        {
            var startingPieces = (WhitePlayer ? ChessFormatter.StartingWhitePieces : ChessFormatter.StartingBlackPieces).ToList();
            var currentPieces = Game.Pieces.Select(p => p.PieceType).Where(p => ChessFormatter.IsPieceWhite(p) == WhitePlayer);

            foreach (var piece in currentPieces)
            {
                if (startingPieces.Contains(piece))
                {
                    startingPieces.Remove(piece);
                }
            }

            return startingPieces;
        }
    }
}
