@using MjrChess.Engine 
@using MjrChess.Trainer.BlazorExtensions
@using MjrChess.Trainer.Models

@inherits MaterialDesignComponentBase

@if (Puzzle != null)
{
    <div class="mdc-card">
        <div>
            <h2 class="mdc-typography mdc-typography--headline6">
                <ChessPieceComponent PieceType="ChessPieces.WhitePawn" File="7" /> @(Puzzle.WhitePlayer?.Name??"White Player")
                v.
                <ChessPieceComponent PieceType="ChessPieces.BlackPawn" File="7" /> @(Puzzle.BlackPlayer?.Name??"Black Player")
            </h2>
            <h3 class="mdc-typography mdc-typography--subtitle2">@Description</h3>
        </div>
        @if (Puzzle.IncorrectMove != null)
        {
            <div class="mdc-typography mdc-typography--body2">
                In this position, @(ChessFormatter.IsPieceWhite(Puzzle.PieceMoved) ? "white" : "black") blundered by playing <strong>@(Puzzle.IncorrectMove.ToString())</strong>. Can you do better?
            </div>
        }
        else
        {
            <div class="mdc-typography mdc-typography--body2">
                In this position, @(ChessFormatter.IsPieceWhite(Puzzle.PieceMoved) ? "white" : "black") successfully took advantage of a poor move by @(ChessFormatter.IsPieceWhite(Puzzle.PieceMoved) ? "black" : "white").
            </div>
        }
        <br />
        <div class="mdc-typography mdc-typography--body2">
            Find the best move for @(ChessFormatter.IsPieceWhite(Puzzle.PieceMoved) ? "white" : "black")!
        </div>
        @switch (PuzzleState)
        {
            case PuzzleState.Solved:
                <div>
                    <h1 class="mdc-typography mdc-typography--headline4 puzzleMessage correctMessage">
                        <i class="material-icons" aria-hidden="true">check</i>
                        Correct
                    </h1>
                </div>
                break;
            case PuzzleState.Missed:
                <div>
                    <h1 class="mdc-typography mdc-typography--headline4 puzzleMessage incorrectMessage">
                        <i class="material-icons md-48" aria-hidden="true">clear</i>
                        Incorrect
                    </h1>
                </div>
                break;
            case PuzzleState.Revealed:
                <div>
                    <h1 class="mdc-typography mdc-typography--headline4 puzzleMessage">
                        <!-- Show the last move made after revealing instead of Puzzle.Solution
                    since Puzzle.Solution only includes the piece and where to move it
                    (without check or checkmate information). -->
                        @PuzzleEngine.Game.Moves.LastOrDefault()
                    </h1>
                </div>
                break;
        }
        <div class="mdc-card__actions mdc-card__actions--full-bleed mdc-layout-grid--align-right">
            @switch (PuzzleState)
            {
                case PuzzleState.Solved:
                case PuzzleState.Revealed:
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => OnReset?.Invoke()">replay</button>
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => OnNext?.Invoke()">skip_next</button>
                    break;
                case PuzzleState.Missed:
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => OnReset?.Invoke()">replay</button>
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => OnReveal?.Invoke()">help_outline</button>
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => OnNext?.Invoke()">skip_next</button>
                    break;
                case PuzzleState.Ongoing:
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => OnReveal?.Invoke()">help_outline</button>
                    <button class="mdc-icon-button mdc-card__action mdc-card__action--icon material-icons pull-right" @onclick="() => OnNext?.Invoke()">skip_next</button>
                    break;
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public TacticsPuzzle? Puzzle { get; set; }

    [Parameter]
    public PuzzleState PuzzleState { get; set; }

    [Parameter]
    public ChessEngine PuzzleEngine { get; set; } = default!;

    [Parameter]
    public Func<Task>? OnNext { get; set; }

    [Parameter]
    public Func<Task>? OnReset { get; set; }

    [Parameter]
    public Func<Task>? OnReveal { get; set; }

    public string Description
    {
        get
        {
            var descriptionComponents = new[] { Puzzle?.Site, Puzzle?.GameDate?.ToString("yyyy-MM-dd") };
            return string.Join(", ", descriptionComponents.Where(s => !string.IsNullOrWhiteSpace(s)));
        }
    }
}
